/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";

export default function SuzukiSwiftMaterials({ scene, scale }) {
  const { nodes, materials } = useGLTF(
    "models/Suzuki_Swift_mod_sketchfab_01.glb"
  );

  useLayoutEffect(() => {
    // Create a new paint material
    materials.paint = materials.paint || new THREE.MeshPhysicalMaterial();

    // Assign the specified values
    materials.paint.color.set("#ffdf71");
    materials.paint.metalness = 0.2;
    materials.paint.clearcoat = 1;
    materials.paint.clearcoatRoughness = 0;
    materials.paint.polygonOffset = true;
    materials.paint.polygonOffsetFactor = -2;
    materials.paint.polygonOffsetUnits = 1;
    materials.paint.roughnessMapIntensity = 2;

    // Apply the new paint material to relevant meshes
    scene.traverse((child) => {
      if (child.isMesh && child.material.name === "carpaint bake") {
        child.material = materials.paint;
      }
    });
  }, [materials, scene]);

  useLayoutEffect(() => {
    console.log("materials", materials["Carpaint-white"].color);
    materials["Carpaint-white"].color.set(1, 1, 1);
    materials["Carpaint-white"].color.roughness = 0;
    materials["Carpaint-white"].color.metalness = 0.5;
    materials["carpaint bake"].color.set("#ffdf71");
    materials["carpaint bake"].clearcoat = 1;
    materials["carpaint bake"].clearcoatRoughness = 0;
    materials["Window border-gloss black"].color.set("#000000");
  }, [materials]);
  return (
    <primitive object={scene} scale={scale}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Brake_disk.geometry}
        material={materials["Brake-disk"]}
        position={[0.683, 0.325, -1.348]}
        rotation={[0, 0, 0.052]}
        scale={1.173}
      />
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.Bronze.geometry}
        material={materials.exhaust_tip}
        position={[0, -0.077, 0]}
      /> */}
      <group position={[0, -0.077, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Vert005.geometry}
          material={materials["Glass-clear"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Vert005_1.geometry}
          material={materials["Glass-clear-bump.001"]}
        />
      </group>
      {/* <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.Carbon_fiber.geometry}
        material={materials["carbon-bake.001"]}
        position={[0, -0.077, 0]}
      /> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Painted_body007.geometry}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Gloass_black.geometry}
        material={materials["Window border-gloss black"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Interior.geometry}
        material={materials["Interior - Black"]}
        position={[-0.383, 0.972, 0.758]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.red_glass_bump.geometry}
        material={materials["Glass-red-bump.001"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Dark_rubber.geometry}
        material={materials["dark rubber"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.reflector.geometry}
        material={materials.Chrome}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Gloss_chrome.geometry}
        material={materials.Chrome}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.red_emission.geometry}
        material={materials["White emission.002"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Windshield.geometry}
        material={materials["Glass-tint.001"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.White_emission.geometry}
        material={materials["White emission"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Glass_with_bump.geometry}
        material={materials["Glass-clear-bump.002"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Chrome_rough.geometry}
        material={materials["Brake hub"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Glass_orange.geometry}
        material={materials["Glass-orange.001"]}
        position={[0, -0.077, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Gloass_paint.geometry}
        material={materials["Carpaint-pink"]}
        position={[0.683, 0.325, -1.348]}
        rotation={[0, 0, 0.052]}
        scale={1.173}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Tyre.geometry}
        material={materials["tyre new"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Wheels.geometry}
        material={materials["Carpaint-white"]}
        position={[0.934, 0.319, 1.118]}
        rotation={[0, 0, 0.052]}
      />
    </primitive>
  );
}

useGLTF.preload("/Suzuki_Swift_mod_sketchfab_01.glb");
