/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";

export default function VWPoloMaterials({ scene, scale }) {
  const { nodes, materials } = useGLTF("models/VW_polo.glb");

  useLayoutEffect(() => {
    // Create a new rubber tyre material
    const tyreMaterial = new THREE.MeshStandardMaterial({
      color: "#202020",
      roughness: 0.8,
      metalness: 0.1,
      // Add a small offset to prevent z-fighting
      polygonOffset: true,
      polygonOffsetFactor: -1,
      polygonOffsetUnits: 1,
    });

    // Apply the tyre material to the tyre004 geometry
    scene.traverse((child) => {
      if (child.isMesh && child.material.name === "Tyre") {
        child.material = tyreMaterial;
      }
    });
    // Create a new paint material
    const paintMaterial = new THREE.MeshStandardMaterial({
      color: "#ffdf71",
      roughness: 0.1,
      clearcoat: 1,
      envMapIntensity: 1.5,
      roughnessMapIntensity: 2,
      // Add a small offset to prevent z-fighting
      polygonOffset: true,
      polygonOffsetFactor: -2,
      polygonOffsetUnits: 1,
    });

    // Apply the new paint material to relevant meshes
    scene.traverse((child) => {
      if (child.isMesh && child.material.name === "Bake-material") {
        child.material = paintMaterial;
      }
    });
  }, [materials, scene]);
  return (
    <primitive object={scene} scale={scale}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["red-painted-parts"].geometry}
        // material={materials["Bake-material"]}
        position={[0, 0, 1.558]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.glass_area.geometry}
        material={materials["Glass-tint"]}
        position={[0, 0, 1.558]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Headlamp_lens.geometry}
        material={materials.Glass_white}
        position={[0, 0, 1.558]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["license-plate"].geometry}
        material={materials["ao-bake-others"]}
        position={[0, 0.506, 1.975]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["chrome-parts"].geometry}
        material={materials["ao-bake-others"]}
        position={[0.029, 0.679, 1.9]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["piano-black"].geometry}
        material={materials["ao-bake-others"]}
        position={[0, 0, 1.558]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["rough-chrome"].geometry}
        material={materials["ao-bake-others"]}
        position={[0, 0, 1.558]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wheels.geometry}
        material={materials["ao-bake-others"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["wheel-nuts"].geometry}
        material={materials["ao-bake-others"]}
        position={[0.802, 0.296, 1.144]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["brake-disk"].geometry}
        material={materials["ao-bake-others"]}
        rotation={[0, 0, -Math.PI / 2]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["brake-hub"].geometry}
          material={materials["ao-bake-others"]}
          rotation={[0, 0, Math.PI / 2]}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["brake-pad"].geometry}
        material={materials["ao-bake-others"]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.ORVM_cover002.geometry}
        material={materials["ao-bake-others"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["hmsl-cover"].geometry}
        material={materials["Glass-red"]}
        position={[0, -0.001, 1.558]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["tail-lamp_glow"].geometry}
        material={materials["Red-emission"]}
        position={[0.61, 0.897, -1.686]}
        rotation={[0, -0.045, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.matt_black.geometry}
        material={materials["ao-bake-others"]}
        position={[0, -0.129, 2.022]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["wheel-cap-rear"].geometry}
        material={materials["ao-bake-others"]}
        position={[0, 0.295, -1.321]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.interior_001002.geometry}
        material={materials["ao-bake-others"]}
        position={[0.022, 1.288, 0.334]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wheels001.geometry}
        material={materials["ao-bake-others"]}
        position={[0.802, 0.296, 1.144]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Tyre004.geometry}
        // material={materials.Tyre}
      />
    </primitive>
  );
}

useGLTF.preload("models/VW_polo.glb");
