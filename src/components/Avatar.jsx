/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useControls } from "leva";
import { useFrame, useLoader } from "@react-three/fiber";
import * as THREE from "three";

const correspondingVisemes = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function Avatar(props, { ratioScale }) {
  const { playAudio, script } = useControls({
    playAudio: false,
    script: {
      value: "intro",
      options: ["intro", "make_me"],
    },
  });

  const audio = useMemo(() => new Audio(`/audio/${script}.mp3`), [script]);
  const [animation, setAnimation] = useState("idle");
  const { nodes, materials } = useGLTF("/models/model_with_morph_targets.glb");

  console.log("nodes", nodes);

  useEffect(() => {
    const handleAudioStart = () => {
      if (script === "intro") {
        setAnimation("greeting");
      } else if (script === "make_me") {
        setAnimation("angry");
      }
    };

    const handleAudioEnd = () => {
      if (script === "make_me") {
        setAnimation("angry");
      } else {
        setAnimation("idle");
      }
    };

    if (playAudio) {
      audio.play();
      handleAudioStart();
    } else {
      audio.pause();
      setAnimation("idle");
    }

    audio.addEventListener("play", handleAudioStart);
    audio.addEventListener("ended", handleAudioEnd);

    return () => {
      audio.removeEventListener("play", handleAudioStart);
      audio.removeEventListener("ended", handleAudioEnd);
    };
  }, [playAudio, script]);

  const [jsonData, setJsonData] = useState(null);
  const [jsonError, setJsonError] = useState(null);

  useEffect(() => {
    const loadJson = async () => {
      try {
        const response = await fetch(`/audio/${script}.json`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const jsonData = await response.json();
        console.log("Loaded JSON data:", jsonData);
        setJsonData(jsonData);
        setJsonError(null);
      } catch (error) {
        console.error("Error loading JSON:", error);
        setJsonError(error.message);
        setJsonData(null);
      }
    };

    loadJson();
  }, [script]);

  useFrame(() => {
    const currentAudioTime = audio.currentTime;
    if (audio.paused || audio.ended) {
      // Remove this line to prevent overriding the animation set by the event listener
      // setAnimation("angry");
    }

    Object.values(correspondingVisemes).forEach((viseme) => {
      nodes.Wolf3D_Head.morphTargetInfluences[
        nodes.Wolf3D_Head.morphTargetDictionary[viseme]
      ] = 0;
      nodes.Wolf3D_Teeth.morphTargetInfluences[
        nodes.Wolf3D_Teeth.morphTargetDictionary[viseme]
      ] = 0;
    });

    if (jsonData) {
      for (let i = 0; i < jsonData.mouthCues.length; i++) {
        const mouthCue = jsonData.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary[
              correspondingVisemes[mouthCue.value]
            ]
          ] = 1;
          nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary[
              correspondingVisemes[mouthCue.value]
            ]
          ] = 1;
          break;
        }
      }
    }
  });

  const { animations: idleAnimations } = useFBX(
    "/models/animations/Standing_Idle.fbx"
  );

  const { animations: angryAnimations } = useFBX(
    "/models/animations/Angry.fbx"
  );
  const { animations: greetingAnimations } = useFBX(
    "/models/animations/Standing_Greeting.fbx"
  );

  idleAnimations[0].name = "idle";
  angryAnimations[0].name = "angry";
  greetingAnimations[0].name = "greeting";

  const group = useRef();

  const { actions } = useAnimations(
    [idleAnimations[0], angryAnimations[0], greetingAnimations[0]],
    group
  );

  console.log("actions", actions);

  useEffect(() => {
    console.log("this is the animation", animation);
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  // useEffect(() => {
  //   console.log(nodes.Wolf3D_Head.morphTargetDictionary);
  //   nodes.Wolf3D_Head.morphTargetInfluences[
  //     nodes.Wolf3D_Head.morphTargetDictionary["viseme_O"]
  //   ] = 1;
  //   nodes.Wolf3D_Teeth.morphTargetInfluences[
  //     nodes.Wolf3D_Teeth.morphTargetDictionary["viseme_O"]
  //   ] = 1;
  // }, []);

  return (
    <group {...props} dispose={null} ref={group} scale={ratioScale}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
    </group>
  );
}

useGLTF.preload("/models/model_with_morph_targets.glb");
